name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check formatting with black
        run: |
          black --check --diff .
        continue-on-error: true
        
      - name: Check imports with isort
        run: |
          isort --check --diff .
        continue-on-error: true
          
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
          
      - name: Create test directory
        run: |
          mkdir -p tests
          
      - name: Create basic test file
        run: |
          cat > tests/test_app.py << 'EOF'
          from fastapi.testclient import TestClient
          from fastapi_app import app

          client = TestClient(app)

          def test_read_root():
              response = client.get("/")
              assert response.status_code == 200
          EOF
          
      - name: Run pytest
        run: |
          pytest --cov=./ --cov-report=xml
        continue-on-error: true
  
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: flowify:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 